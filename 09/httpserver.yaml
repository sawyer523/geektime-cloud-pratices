apiVersion: v1
kind: Service
metadata:
  name: httpserver
  namespace: default
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: httpserver

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: httpserver-config
data:
  config: |
    port: 8080
    logLevel: INFO

---
apiVersion: v1
kind: Secret
metadata:
  name: httpserver-tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN6RENDQWJRQ0NRREZBdTVVWVpNZWVUQU5CZ2txaGtpRzl3MEJBUXNGQURBb01SUXdFZ1lEVlFRRERBdGwKZUdGdGNHeGxMbU52YlRFUU1BNEdBMVVFQ2d3SFpYaGhiWEJzWlRBZUZ3MHlNVEV4TWpFeE1EUXpORE5hRncweQpNakV4TWpFeE1EUXpORE5hTUNneEZEQVNCZ05WQkFNTUMyVjRZVzF3YkdVdVkyOXRNUkF3RGdZRFZRUUtEQWRsCmVHRnRjR3hsTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFzeDRXOU92cy9YSFEKSkxIeThZTGxXaXZ6K0l2cDAvZGdFcVBCcjBKY3oyNFRxb1hjVmtmQjZ4enlPVlNrUm1rdEtBbzdURk01a0NmcwpIQ1g1SVB0K1dKcTEvcDhneitETUtoVlMxRVdvSEFXRGVQdEZrUlB3Q2VWdllYSmFjQ2VoVmFmWTNtY2dmSjJJCjNISHJ2ZTdJaGwwcDN1QnRNdEZOOTRHVTgxNExCL2FnQmM1UWRpNFhXS1hVUjBObE9zcEY3S3dHZEthMDVVY0wKSXNoVVR6UWNmMFUrdWI2bHc2ck84UVRuRGlqRkh3dmpLdWlmQVJVZ1g2R2hyY3RNRm94WjFZTm5zeVhGTkVlcgpTSnJqdTJRSHlMLytzWktmSW9Eam9RK21WWGQrOFZBK2FtZ2tteGE3OGRYczdQMlJJWkdKNW53MjduYm02d1kvCjRwb0IybkQwRlFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFXd29HTzlwVk9Sa3haQ1l3T1o3WWgKc3ZCVUg4NWxGRXZuY1NRMUlRZk1CNlluWTZCVjdySnhWNHFueGNsNUJOdG1waUI4T0pwazdnRUdCYit4WkJrcApyeW1aUWh3VFB3YTBmQXV3Tm5HR1BjQ21Wb0gyYTA2WUN4M1FaM1RjMEJZSGFUQlpEUGtXWmNHakFiMDcra2lqCkwrd0xzdTNUelp4VytvYXNWTFJVOEhJaC9TZmtqckJEVStHRDRidmRySThQbjRySVlzTlpQSmxsZWQvZklCajgKSEFGMmhmb2pEVGNkcXFkV2hveWk2Snl3YVFJR2JLSTRQaFRFb1hxaDUrcWU4YjR6S2FVM1greFFmVUVuMS9kRAoycUpMQXdkOEhCcEx5VHljVjJTVE9WVGJVTWUyYitiZEdCd2pJQyt3V1c4OGlBUHpEOHJTeFh1ZVVyeVBITXI4Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3pIaGIwNit6OWNkQWsKc2ZMeGd1VmFLL1A0aStuVDkyQVNvOEd2UWx6UGJoT3FoZHhXUjhIckhQSTVWS1JHYVMwb0NqdE1Vem1RSit3YwpKZmtnKzM1WW1yWCtueURQNE13cUZWTFVSYWdjQllONCswV1JFL0FKNVc5aGNscHdKNkZWcDlqZVp5QjhuWWpjCmNldTk3c2lHWFNuZTRHMHkwVTMzZ1pUelhnc0g5cUFGemxCMkxoZFlwZFJIUTJVNnlrWHNyQVowcHJUbFJ3c2kKeUZSUE5CeC9SVDY1dnFYRHFzN3hCT2NPS01VZkMrTXE2SjhCRlNCZm9hR3R5MHdXakZuVmcyZXpKY1UwUjZ0SQptdU83WkFmSXYvNnhrcDhpZ09PaEQ2WlZkMzd4VUQ1cWFDU2JGcnZ4MWV6cy9aRWhrWW5tZkRidWR1YnJCai9pCm1nSGFjUFFWQWdNQkFBRUNnZ0VBS1RaSUkreFFwL1BTNTA2R1RtbEdxaHVvMDh3bGJkN2lIUWZPbmF1UVBTM2YKbW9HWU04WG82VmJNcU1JLzFlK0hNMG8vWUkxWmxrQ0pRK1M4MElqdEJpZjZyZTRoRjVOcWhsaEhxWTJwWTJFbApZZVcybU8zVWNnSjNRUjJWajI2ZTRWMXdPYVBTeHJsY2J4UkxJSFZiY0FicGhsMXU0cDFqNmduSG9zTkZtSHdVCmduelNZNVhpRGd1YjRNUU5iN1Y3NFYvRUtEQTdXVTh5TThVYXNvWWhNRlJKQUhySWZPVlkzVk9iZE5uczJCYXUKbFQxSDVDdDFGMkNHQWJsbjhRK1ZDdnVYU1FJZlYwN2dkN3RqQjlrNGZOa0NXZmw3WnhMY1g0UlVhbHBBbXdXNQp3WXByQ1djakVYY05MUFFZdXBXZ1dMcXY3cmN4a2R5V3h2TDRYM0FBd1FLQmdRRG1VUEFBb2ErUVcwRHpkUlFZCitTclVBUFFCeFUzOHgzcTdYNW9vWE80em5XQk15ZktFNlRXanlmVFoxV0ZYeldQTGxJTUdjYkJVVHNBQ1o1eUkKSk83WDRaSGw5Um92OGR0VS9GRy9kTnlrRWErNWM0dVNXcVJsUEpqYmd6bmwwanpadkNKeXR3ZmdQQkZDVDV4bAp4dlgzVWluUkU0Rkg2Yks4dWZwRE1oQk9VUUtCZ1FESEY0alp0bDg2TS9LYkNjVDdubEhxdDJKS2g3Y05mRjUrCmQ2a0xpd21QZU83UitQZi9nL1lkYUJQYnRWV3E2WWEwRmN2bURidUhqRzVzeSt3bS80Y1lqR3djcXFaNlFpR0IKVXpLcStCS2RQL1d1UTR4SDc5OUprZDNDclhUZ2RJUkRCdjRPM0lBTitDNWowY3o2OVFzeS9jME1HMUZ0NDVpcQp0T0NjQUE4RWhRS0JnUUNWcTVGY0I3YU1yQkNZWmNRcXVubVBqaE1EdDVHSHJLWmdiNjlCZmFxNlZoSkh0SkRxCnVKYklHcTBJaG5jYzFQZCtTOE9lQTNHZ1NCRFZQem5rNjROZlBWSlB5eWs2Y1FTa3hOZm5BRzJHSFl4Qml3bnYKa1FIMlhCdkZ3eEJ6L2x6VzdrREFwWnJ6cUhWYXoxdUdkSFpSUTg2eTlPYjFzYlFhbXcwOGI2TlRFUUtCZ0E5MApIVFJBK3ExSzRQYjEwQ3R6dzRvRGlBYWUrQzk4eXR6b0x0L3RmK1Y2RHBlUHlyZ3pwd1ByVXpkSG9RbXVMTDJICnY1YncwL0NXanUrMCtIU2lldnNGMDFKNlVJZkc0RkRvZzFOUUJDbmVrQlJodTk3Tm1MaGVNU2R1VFZjcTFDVmIKd3BhbXVPM2NxTVVvd005dCs5dU9aYjhkMDdsQzVGUER6SGR2YmJyOUFvR0FWTjBVRXdvaHMyRVNlNDlSRjh5cQpzTHppcFBJYlcvMWJuelN0cTdiditkekRRNk5LYnVXTjRVZVFxZFArd25ZcFFIbjJPSWpPRnovb3dJOFpreWhoCmFDeDJ3cFZkMkl0V1ZoUjY1TE5ETlpZc2ZIZkk5NzJ6K3kyUDA4TXZaSk1QTlZBcEtaMy91TlYvOTZUVUtiUXUKYjFMeDVJMTdzNjBmdFFJR3JCa1ZpTWc9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gateway
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    kubernetes.io/ingress.class: "nginx"
spec:
  tls:
    - hosts:
        - example.com
      secretName: httpserver-tls
  rules:
    - host: "*.example.com"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: httpserver
                port:
                  number: 80

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpserver
  namespace: default
  labels:
    app: httpserver
spec:
  replicas: 3
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: httpserver
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: httpserver
    spec:
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - httpserver
                topologyKey: kubernetes.io/hostname
              weight: 100
      securityContext:
        runAsUser: 1000
        runAsGroup: 2000
      containers:
        - name: httpserver
          image: docker.io/sawyer523/httpserver:v1.2.0.15
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8080
          volumeMounts:
            - mountPath: "/opt"
              name: config
          livenessProbe:
            httpGet:
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 2
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /healthz
              port: 8080
            periodSeconds: 3
            failureThreshold: 10
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "cat /opt/config"]
            preStop:
              exec:
                 command: ["/bin/sh", "-c", "pkill -3 httpserver"]
      volumes:
        - name: config
          configMap:
            name: httpserver-config


